{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","endpoint","axios","get","then","res","data","name","sys","country","d","date","String","window","Date","slice","day","getDay","dateBuilder","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAGMA,EACC,mCADDA,EAEM,0CAwFGC,MApFf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KAqCA,OACE,qBAAKC,UACsB,oBAAhBF,EAAQG,MACbH,EAAQG,KAAKC,KAAO,GACpB,WAEH,MALH,SAOE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OACVH,UAAU,aACVI,YAAY,YACZC,SAjCV,SAAsBC,GACpBT,EAASS,EAAEC,OAAOC,QAiCVC,WAhDQ,SAACH,GAChB,GAAc,UAAVA,EAAEI,IAAgB,CACrB,IAAMC,EAAQ,UAAMlB,EAAN,qBAA+BG,EAA/B,+BAA2DH,GAEzEmB,IAAMC,IAAIF,GAAUG,MAAK,SAAAC,GACvB,IAAMC,EAAOD,EAAIC,KACjBjB,EAAWiB,GACXnB,EAAS,SA0CLW,MAAOZ,MAIa,oBAAhBE,EAAQG,KAChB,gCACA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQmB,KAAnC,KAA2CnB,EAAQoB,IAAIC,WACrD,qBAAKnB,UAAU,OAAf,SApCU,SAACoB,GACnB,IAAIC,EAAOC,OAAO,IAAIC,OAAOC,MAC7BH,EAAOA,EAAKI,MAAM,EAAE,IAEpB,IACIC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC/DN,EAAEO,UAEjB,MAAM,GAAN,OAAUD,EAAV,YAAiBL,GA6BcO,CAAY,IAAIJ,WAG3C,sBAAKxB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG6B,KAAKC,MAAMhC,EAAQG,KAAKC,MAD3B,WAIA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,aAIrB,SCzEI8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.50b12074.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport axios from 'axios';\n\nconst api = {\n  key: '7beedcd716bb91a99f2dfbd7d36d07d9',\n  base_url: 'http://api.openweathermap.org/data/2.5/'\n}\n\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather ] = useState({});\n  \n  \n  const fetchData = (e) => {\n     if (e.key === 'Enter'){\n      const endpoint = `${api.base_url}weather?q=${query}&units=metric&appid=${api.key}`;\n      //console.log(endpoint);\n      axios.get(endpoint).then(res => { \n        const data = res.data;\n        setWeather(data);\n        setQuery('');\n        //console.log((data))\n      })\n     }  \n  }\n\n  //Input field handler\n  function handleChange(e) {\n    setQuery(e.target.value);\n  }\n\n \n\n\n  const dateBuilder = (d) => {\n    let date = String(new window.Date()); //creates a new date object with current date and time\n    date = date.slice(3,15); \n\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[d.getDay()];\n\n    return `${day} ${date}`\n  }\n\n\n\n\n  return (\n    <div className={\n      ( typeof weather.main != 'undefined' ) \n      ? ((weather.main.temp > 16) \n        ? 'app warm'\n        : 'app') \n      :'app'}>\n\n      <main>\n        <div className='search-box'>\n          <input type=\"text\"\n            className='search-bar'\n            placeholder='Search...'\n            onChange={handleChange}\n            onKeyPress={fetchData}\n            value={query}\n          />\n        </div>\n        {\n        (typeof weather.main != \"undefined\") ? (\n        <div>\n        <div className='location-box'>\n          <div className='location'>{weather.name}, {weather.sys.country}</div>\n            <div className='date'>{dateBuilder(new Date())}</div>\n        </div>\n\n        <div className='weather-box'>\n          <div className='temp'> \n            {Math.round(weather.main.temp)}Â°c\n          </div>\n          \n          <div className='weather'>\n            {weather.weather[0].main}\n          </div>\n        </div>\n        </div>\n        ):('')\n        }\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}